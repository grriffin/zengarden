@import url('https://fonts.googleapis.com/css2?family=Odibee+Sans&family=Press+Start+2P&family=Source+Sans+Pro&display=swap');

//font-families
$fontfamily-odibee: 'Odibee Sans', 'Source Sans Pro', Arial, sans-serif;
$fontfamily-press-start:'Press Start 2P', Arial, Verdana, sans-serif;
$fontfamily-source: 'Source Sans Pro', sans-serif;

$fontsize-mainheading: 32pt;
$fontsize-mainheading-large:96pt;
$fontsize-subheading: 16pt;
$fontsize-subheading-large: 24pt;
$fontsize-sidebarheading: 24pt;
$fontsize-sidebarsubheading-allcaps: 15pt;
$fontsize-sidebarsubheading: 14pt;
$fontsize-sidebar-author: 11pt;
$fontsize-body: 12pt;
$fontsize-large: 14pt;

$red: #ED1A25;
$darkblue: #15295B;
$lightblue: #00ACE5;
$purple: #AB1DA4;
$orange: #FD8C13;
$yellow: #FFCC22;
$green: #48C233;

$body-color: #2D2D2D;
$body-color-light: white;

$tetris-block-size: 60px;
$column-size: 24px;

@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  
  @return $string;
}

@function url-svg($icon) {
  @return url('data:image/svg+xml;utf8,#{str-replace($icon, "#", "%23")}');
}

@mixin red-filter() {
  filter: invert(23%) sepia(82%) saturate(6924%) hue-rotate(350deg) brightness(95%) contrast(95%);
}

@mixin darkblue-filter() {
  filter: invert(10%) sepia(94%) saturate(1865%) hue-rotate(214deg) brightness(89%) contrast(92%);
}

@mixin lightblue-filter() {
  filter: invert(51%) sepia(37%) saturate(5145%) hue-rotate(164deg) brightness(102%) contrast(101%);
}

@mixin purple-filter() {
  filter: invert(16%) sepia(66%) saturate(4034%) hue-rotate(290deg) brightness(101%) contrast(95%);
}

@mixin orange-filter() {
  filter: invert(77%) sepia(68%) saturate(4794%) hue-rotate(351deg) brightness(102%) contrast(98%);
}

@mixin yellow-filter() {
  filter: invert(80%) sepia(83%) saturate(1667%) hue-rotate(336deg) brightness(101%) contrast(101%);
}

@mixin green-filter() {
  filter: invert(62%) sepia(14%) saturate(2383%) hue-rotate(65deg) brightness(102%) contrast(81%);
}

@function tetris-l($fill, $blocksize:$tetris-block-size, $background:white) {
  $numbers: (0, 0) (1, 0) (2, 0) (0,1);
  @return tetris-piece($fill, $numbers, 60, $background);
  //$spacing: $blocksize * 0.1; 
  //@return url-svg('<svg  xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="#{$blocksize*3}" height="#{$blocksize*2}" viewBox="0 0 #{$blocksize*3} #{$blocksize*2}"> <rect x="0" y="0" height="#{$blocksize}" width="#{$blocksize}"  stroke="#{$background}" stroke-width="#{$spacing}" fill="#{$fill}"/> <rect x="#{$blocksize}" y="0" height="#{$blocksize}" width="#{$blocksize}"  stroke="#{$background}" stroke-width="#{$spacing}" fill="#{$fill}"/> <rect x="#{$blocksize*2}" y="0" height="#{$blocksize}" width="#{$blocksize}"  stroke="#{$background}" stroke-width="#{$spacing}" fill="#{$fill}"/> <rect x="0" y="#{$blocksize}" height="#{$blocksize}" width="#{$blocksize}"  stroke="#{$background}" stroke-width="#{$spacing}" fill="#{$fill}"/> </svg>');
}

@function tetris-reverse-l($fill, $blocksize:$tetris-block-size, $background:white) {
  $spacing: $blocksize * 0.1; 
  @return url-svg('<svg  xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="#{$blocksize*2}" height="#{$blocksize*3}" viewBox="0 0 80 #{$blocksize*3}"> <rect x="#{$blocksize}" y="0" height="#{$blocksize}" width="#{$blocksize}" stroke="#{$background}" stroke-width="#{spacing}" fill="#{$fill}"/> <rect x="#{$blocksize}" y="#{$blocksize}" height="#{$blocksize}" width="#{$blocksize}" stroke="#{$background}" stroke-width="#{spacing}" fill="#{$fill}"/> <rect x="#{$blocksize}" y="#{$blocksize*2}" height="#{$blocksize}" width="#{$blocksize}" stroke="#{$background}" stroke-width="#{spacing}" fill="#{$fill}"/> <rect x="0" y="#{$blocksize*2}" height="#{$blocksize}" width="#{$blocksize}" stroke="#{$background}" stroke-width="#{spacing}" fill="#{$fill}"/> </svg>');
}

@function tetris-piece($fill, $blocks, $blocksize:$tetris-block-size, $background:white) {
  $spacing: $blocksize * 0.1; 
  $svg: '<svg  xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="#{$blocksize*3}" height="#{$blocksize*3}" viewBox="0 0 #{$blocksize*3} #{$blocksize*3}">';
  @each $block-x, $block-y in $blocks {
    $svg : $svg + tetris-block($block-x, $block-y, $fill, $blocksize, $background, $spacing);
  }
  $svg: $svg + '</svg>';
  @return url-svg($svg);
  /*@return url-svg($svg-header 
    + tetris-block(0, 0, $fill, $blocksize, $background, $spacing)
    + tetris-block(1, 0, $fill, $blocksize, $background, $spacing)
    + tetris-block(2, 0, $fill, $blocksize, $background, $spacing)
    + tetris-block(0, 1, $fill, $blocksize, $background, $spacing)
    + '</svg>');*/
  //@return url-svg('<svg  xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="#{$blocksize*2}" height="#{$blocksize*3}" viewBox="0 0 80 #{$blocksize*3}"> <rect x="#{$blocksize}" y="0" height="#{$blocksize}" width="#{$blocksize}" stroke="#{$background}" stroke-width="#{spacing}" fill="#{$fill}"/> <rect x="#{$blocksize}" y="#{$blocksize}" height="#{$blocksize}" width="#{$blocksize}" stroke="#{$background}" stroke-width="#{spacing}" fill="#{$fill}"/> <rect x="#{$blocksize}" y="#{$blocksize*2}" height="#{$blocksize}" width="#{$blocksize}" stroke="#{$background}" stroke-width="#{spacing}" fill="#{$fill}"/> <rect x="0" y="#{$blocksize*2}" height="#{$blocksize}" width="#{$blocksize}" stroke="#{$background}" stroke-width="#{spacing}" fill="#{$fill}"/> </svg>');
}

@function tetris-block($pos-x, $pos-y, $fill, $blocksize, $background, $spacing) {
  @return '<rect x="#{$pos-x*$blocksize}" y="#{$pos-y*$blocksize}" height="#{$blocksize}" width="#{$blocksize}" stroke="#{$background}" stroke-width="#{$spacing}" fill="#{$fill}"/>';
}

@mixin font-odibee($size: false, $color: false, $weight: false, $lh: false) {
    font-family: $fontfamily-odibee;
    text-transform: uppercase;
    @if $size { font-size: $size; }
    @if $color { color: $color; }
    @if $weight { font-weight: $weight; }
    @if $lh { line-height: $lh; }
}

@mixin font-press-start($size: false, $color: false, $weight: false, $lh: false) {
    font-family: $fontfamily-press-start;
    @if $size { font-size: $size; }
    @if $color { color: $color; }
    @if $weight { font-weight: $weight; }
    @if $lh { line-height: $lh; }
}

@mixin font-source($size: false, $color: false, $weight: false, $lh: false, $all-caps:false) {
    font-family: $fontfamily-source;
    @if $size { font-size: $size; }
    @if $color { color: $color; }
    @if $weight { font-weight: $weight; }
    @if $lh { line-height: $lh; }
    @if $all-caps { text-transform: uppercase;}
}

@mixin for-phone-only {
  @media (max-width: 599px) { @content; }
}

@mixin for-tablet-portrait-up {
  @media (min-width: 600px) { @content; }
}

@mixin for-tablet-landscape-up {
  @media (min-width: 900px) { @content; }
}

@mixin for-desktop-up {
  @media (min-width: 1200px) { @content; }
}

@mixin standardhpadding {
  padding-left:1rem;
  pading-right:1rem;
}

@mixin section($color,$padding-left:1rem, $padding-right:1rem) {
  h3 {
    @include font-press-start($fontsize-subheading, $color);
    margin-top:0;
    margin-bottom:1em;
  }
  padding-left:$padding-left;
  padding-right:$padding-right;
}


